__version__ = (2,0,0)
# meta developer: @Not_Toxa (–ª–æ—à–∏–∫ –ø—Ä–∏–≤–µ—Ç)

from .. import loader, utils
import logging
import re
from typing import Optional, Union, Tuple

logger = logging.getLogger(__name__)
pattern = re.compile("\d+-\d+")

@loader.tds
class BioCounter(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π –≤ –∏—Ä–∏—Å–µ"""
    strings = {
        "name": "BioCounter"
    }
    
    async def –∫–∞–ª–∫cmd(self, m) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞"""
        args = utils.get_args(m)
        ifs = await normal_args(args)
        if ifs is True:
            await utils.answer(m, await resulter(args))
        elif isinstance(ifs, str):
            await utils.answer(m, ifs)
        
async def resulter(args) -> str:
    factor = await action_factor(args[0])
    if pattern.match(args[1]):
        price = sum(
                [await counter(
                    lvl, factor[0]
                ) for lvl in range(
                    *list(map(lambda x: int(x)+1, args[1].split("-")))
                )]
            )
        return "‚ùì –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞ ¬´{0}¬ª —Å {1} –¥–æ {2} –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è {3:,}{4}üß¨".format(
            factor[1], *args[1].split("-"), price, ("k" if price >= 1000 else "")
        ).replace(","," ")
    else:
        price = await counter(
                int(args[1]), factor[0]
            )
        return "‚ùì –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞ ¬´{0}¬ª –¥–æ {1} —Ç—Ä–µ–±—É–µ—Ç—Å—è {2:,}{3} üß¨".format(
            factor[1], args[1], price, ("k" if price >= 1000 else "")
       ).replace(",", " ")

async def normal_args(args) -> Union[bool, str]:
    if not len(args) == 2:
        return "<b>–£–∫–∞–∑–∞–Ω–æ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤</b>"
    elif await action_factor(args[0]) is None:
        return "<b>–î–∞–Ω–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç</b>"
    elif not args[1].isdigit():
        if pattern.match(args[1]):
            return True
        else:
            return "<b>–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º</b>"
    else:
        return True

async def action_factor(
    factor: str
    ) -> Optional[
        Tuple[Union[int, float], str]
        ]:
    if factor in (
        '–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å', 
        '–∑–∑', 
        ): return (2.5, "–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å", )
    elif factor in (
        "–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è",
        "—É—á—ë–Ω—ã–µ",
        "—É—á–µ–Ω—ã–µ",
        "–∫–≤–∞–ª",
        ): return (2.6, "–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", )
    elif factor in (
        "–ø–∞—Ç–æ–≥–µ–Ω—ã",
        "–ø–∞—Ç–æ–≥–µ–Ω"
        "–ø–∞—Ç",
        "–ø–∞—Ç—ã",
        ): return (2, "–ø–∞—Ç–æ–≥–µ–Ω—ã", )
    elif factor in (
        "–∏–º–º—É–Ω–∏—Ç–µ—Ç",
        "–∏–º—É–Ω",
        ): return (2.45, "–∏–º–º—É–Ω–∏—Ç–µ—Ç", )
    elif factor in (
        "–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å",
        "–ª–µ—Ç–∞–ª",
        "–ª–µ—Ç–∞–ª–∫–∞",
        ): return (1.95, "–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å", )
    elif factor in (
        "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        "—Å–±",
        ): return (2.1, "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", )

async def counter(lvl: int, factor: Union[int, float]) -> int:
    return int(lvl**factor)